import java.awt.event.*;
import java.awt.Color;
import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
public class GameFrame extends JFrame implements KeyListener{
    public static Game g = new Game();

    private JLabel label1;
    private JLabel[][] labels;
    public static void main (String[] args){
        new GameFrame();
    }

    GameFrame(){ 
        g.addNewNumber();
        labels = new JLabel[4][4];
        ImageIcon image2048 = new ImageIcon("///H:/2048.png");
        ImageIcon image2 = new ImageIcon("///H:/2.png");
        ImageIcon image4 = new ImageIcon("///H:/image4.png");
        ImageIcon image8 = new ImageIcon("///H:/8.png");
        ImageIcon image16 = new ImageIcon("///H:/16.png");
        ImageIcon image32 = new ImageIcon("///H:/32.png");
        ImageIcon image64 = new ImageIcon("///H:/tile_6 (2).png");
        //ImageIcon image = new ImageIcon("///H:/2048.png");

        this.setIconImage(image2048.getImage());
        for (int i = 0; i < labels.length; i++) {
            for (int j = 0; j < labels[i].length; j++){
                if(g.getBoard()[i][j]!=0){
                    labels[i][j] = new JLabel();
                    labels[i][j].setBounds(i*100,j*100,100,100);
                    //labels[i][j].setIcon(image);
                    this.add(labels[i][j]);
                }
            }
        }
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(415,435);
        this.setLayout(null);
        this.addKeyListener(this);
        this.setTitle("2048");
        /*
        label1 = new JLabel();
        label1.setBounds(0,0,100,100);
        label1.setIcon(image);

        this.add(label1);
         */
        for(int i=0; i<4; i++){
            for(int j=0; j<4; j++){
                if(g.getBoard()[i][j]!=0){
                    switch(g.getBoard()[i][j]){
                        case 2: labels[i][j].setIcon(image2);
                        break;
                        case 4: labels[i][j].setIcon(image4);
                        break;
                        case 8: labels[i][j].setIcon(image8);
                        break;
                        case 16: labels[i][j].setIcon(image16);
                        break;
                        case 32: labels[i][j].setIcon(image32);
                        break;
                        case 64: labels[i][j].setIcon(image64);
                        break;
                        case 128: labels[i][j].setIcon(image2);
                        break;
                        case 256: labels[i][j].setIcon(image2048);
                        break;
                        case 512: labels[i][j].setIcon(image2);
                        break;
                        case 1024: labels[i][j].setIcon(image2048);
                        break;
                        case 2048: labels[i][j].setIcon(image2);
                        break;
                    }
                }
            }
        }

        this.setVisible(true);
    }

    @Override
    public void keyTyped(KeyEvent e){
        switch(e.getKeyChar()){
            case 'w': g.pushLeft(g.getBoard());
            g.addNewNumber();
            new GameFrame();
            break;
            case 'a': g.pushUp(g.getBoard());
            g.addNewNumber();
            new GameFrame();
            break;
            case 'd': g.pushDown(g.getBoard());
            g.addNewNumber();
            new GameFrame();
            break;
            case 's': g.pushRight(g.getBoard());
            g.addNewNumber();
            new GameFrame();
            break;
        }
    }

    @Override
    public void keyPressed(KeyEvent e){
        switch(e.getKeyCode()) {
            /*
            case 37: label2.setLocation(label2.getX()-100, label2.getY());
            break;
            case 38: label2.setLocation(label2.getX(), label2.getY()-100);
            break;
            case 39: label2.setLocation(label2.getX()+100, label2.getY());
            break;
            case 40: label2.setLocation(label2.getX(), label2.getY()+100);
            break;
             */

        }
    }

    @Override
    public void keyReleased(KeyEvent e){
    }
}
